{"version":3,"sources":["core/loader/index.tsx","components/Main.tsx","reportWebVitals.ts","helpers/filterDuplicatedIDs.ts","redux/reducers/rootReducer.ts","api/index.ts","redux/sagas/index.ts","redux/store/index.ts","index.tsx","constants/actionTypes.ts"],"names":["Loader","className","Sidebar","React","lazy","Gallery","EmptyGallery","Main","Suspense","fallback","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","filterDuplicatedIDs","originList","newList","originListIDs","map","item","id","filteredList","filter","includes","initialState","category","isFetching","error","list","image","rootReducer","state","action","type","actionTypes","categories","images","API_URL","Api","fetch","response","ok","json","Error","status","limit","category_ids","fetchCategories","fetchImages","rootSaga","call","getCategories","put","message","getImages","params","takeLatest","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","GET_CATEGORIES","GET_CATEGORIES_SUCCESS","GET_CATEGORIES_FAIL","GET_IMAGES","GET_IMAGES_SUCCESS","GET_IMAGES_FAIL","GET_MORE_IMAGES","GET_MORE_IMAGES_SUCCESS","GET_MORE_IMAGES_FAIL"],"mappings":"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","file":"static/js/main.ef907cd1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './style.scss';\r\n\r\nconst Loader: React.FC<{ className: string}> = ({className}) => {\r\n  return (\r\n    <div className={className}>\r\n          <div className=\"loader\">\r\n      <div className=\"face\">\r\n        <div className=\"circle\"></div>\r\n      </div>\r\n      <div className=\"face\">\r\n        <div className=\"circle\"></div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Loader from \"../core/loader\";\r\n\r\nconst Sidebar = React.lazy(() => import(\"./Sidebar\"));\r\nconst Gallery = React.lazy(() => import(\"./Gallery\"));\r\nconst EmptyGallery = React.lazy(() => import(\"./EmptyGallery\"));\r\n\r\nconst Main: React.FC = () => {\r\n  return (\r\n    <div className=\"main\">\r\n      <React.Suspense fallback={<Loader className=\"main-load\" />}>\r\n        <Router>\r\n          <Sidebar />\r\n          <Switch>\r\n            <Route exact path={\"/\"} component={EmptyGallery} />\r\n            <Route path={\"/gallery\"} component={Gallery} />\r\n          </Switch>\r\n        </Router>\r\n      </React.Suspense>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { Image } from \"../constants/types\";\r\n\r\nconst filterDuplicatedIDs = (\r\n  originList: Image[\"list\"],\r\n  newList: Image[\"list\"]\r\n) => {\r\n  const originListIDs = originList.map((item) => item.id);\r\n  const filteredList = newList.filter(\r\n    (item) => !originListIDs.includes(item.id)\r\n  );\r\n  return [...originList, ...filteredList];\r\n};\r\n\r\nexport default filterDuplicatedIDs;\r\n","import * as actionTypes from \"../../constants/actionTypes\";\r\nimport { DefaultRootState, Action } from \"../../constants/types\";\r\nimport filterDuplicatedIDs from \"../../helpers/filterDuplicatedIDs\";\r\n\r\nconst initialState: DefaultRootState = {\r\n  category: {\r\n    isFetching: false,\r\n    error: \"\",\r\n    list: [],\r\n  },\r\n  image: {\r\n    isFetching: false,\r\n    error: \"\",\r\n    list: [],\r\n  },\r\n};\r\n\r\nconst rootReducer = (state = initialState, action: Action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_CATEGORIES:\r\n      return { ...state, category: { ...state.category, isFetching: true } };\r\n    case actionTypes.GET_CATEGORIES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        category: {\r\n          ...state.category,\r\n          isFetching: false,\r\n          list: action.categories,\r\n        },\r\n      };\r\n    case actionTypes.GET_CATEGORIES_FAIL:\r\n      return {\r\n        ...state,\r\n        category: {\r\n          ...state.category,\r\n          isFetching: false,\r\n          error: action.error,\r\n        },\r\n      };\r\n\r\n    case actionTypes.GET_IMAGES:\r\n      return { ...state, image: { ...state.image, isFetching: true } };\r\n\r\n    case actionTypes.GET_IMAGES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        image: {\r\n          ...state.image,\r\n          isFetching: false,\r\n          list: action.images,\r\n        },\r\n      };\r\n\r\n    case actionTypes.GET_IMAGES_FAIL:\r\n      return {\r\n        ...state,\r\n        image: {\r\n          ...state.image,\r\n          isFetching: false,\r\n          error: action.error,\r\n        },\r\n      };\r\n\r\n    case actionTypes.GET_MORE_IMAGES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        image: {\r\n          ...state.image,\r\n          list: filterDuplicatedIDs(state.image.list, action.images),\r\n        },\r\n      };\r\n\r\n    case actionTypes.GET_MORE_IMAGES_FAIL:\r\n      return {\r\n        ...state,\r\n        image: {\r\n          ...state.image,\r\n          error: action.error,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import { Params } from \"../redux/actions\";\r\n\r\nconst API_URL = \"https://api.thecatapi.com/v1\";\r\n\r\nexport default class Api {\r\n  static async getCategories() {\r\n    const response = await fetch(`${API_URL}/categories`);\r\n    if (response.ok) return await response.json();\r\n    throw new Error(`An error has occurred: ${response.status}`);\r\n  }\r\n\r\n  static async getImages({ limit, category_ids }: Params) {\r\n    const response = await fetch(\r\n      `${API_URL}/images/search?limit=${limit}&category_ids=${category_ids}`\r\n    );\r\n    if (response.ok) return await response.json();\r\n    throw new Error(`An error has occurred: ${response.status}`);\r\n  }\r\n}\r\n","import { put, call, takeLatest } from \"redux-saga/effects\";\r\nimport * as actionTypes from \"../../constants/actionTypes\";\r\nimport Api from \"../../api\";\r\nimport { Params } from \"../actions\";\r\n\r\nfunction* fetchCategories() {\r\n  try {\r\n    const categories = yield call(Api.getCategories);\r\n    yield put({ type: actionTypes.GET_CATEGORIES_SUCCESS, categories });\r\n  } catch (error) {\r\n    yield put({ type: actionTypes.GET_CATEGORIES_FAIL, error: error.message });\r\n  }\r\n}\r\n\r\nfunction* fetchImages(action: { type: string; params: Params }) {\r\n  if (action.type === actionTypes.GET_IMAGES) {\r\n    try {\r\n      const images = yield call(Api.getImages, action.params);\r\n      yield put({ type: actionTypes.GET_IMAGES_SUCCESS, images });\r\n    } catch (error) {\r\n      yield put({ type: actionTypes.GET_IMAGES_FAIL, error: error.message });\r\n    }\r\n  } else {\r\n    try {\r\n      const images = yield call(Api.getImages, action.params);\r\n      yield put({ type: actionTypes.GET_MORE_IMAGES_SUCCESS, images });\r\n    } catch (error) {\r\n      yield put({\r\n        type: actionTypes.GET_MORE_IMAGES_FAIL,\r\n        error: error.message,\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield takeLatest(actionTypes.GET_CATEGORIES, fetchCategories);\r\n  yield takeLatest(actionTypes.GET_IMAGES, fetchImages);\r\n  yield takeLatest(actionTypes.GET_MORE_IMAGES, fetchImages);\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"../reducers/rootReducer\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"../sagas/index\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"../src/style/index.scss\";\r\nimport Main from \"./components/Main\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { store } from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Main />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export const GET_CATEGORIES = \"GET_CATEGORIES\";\r\nexport const GET_CATEGORIES_SUCCESS = \"GET_CATEGORIES_SUCCESS\";\r\nexport const GET_CATEGORIES_FAIL = \"GET_CATEGORIES_FAIL\";\r\n\r\nexport const GET_IMAGES = \"GET_IMAGES\";\r\nexport const GET_IMAGES_SUCCESS = \"GET_IMAGES_SUCCESS\";\r\nexport const GET_IMAGES_FAIL = \"GET_IMAGES_FAIL\";\r\n\r\nexport const GET_MORE_IMAGES = \"GET_MORE_IMAGES\";\r\nexport const GET_MORE_IMAGES_SUCCESS = \"GET_MORE_IMAGES_SUCCESS\";\r\nexport const GET_MORE_IMAGES_FAIL = \"GET_MORE_IMAGES_FAIL\";\r\n"],"sourceRoot":""}